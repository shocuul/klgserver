<!DOCTYPE html>
<html ng-app="KLGServerApp">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Kaos Latin Servers</title>

    <meta name="description" content="">

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <!-- Icon -->
    <link rel="icon" type="image/png" href="/images/icon.png">

    <!-- Google Fonts -->
    <link href='http://fonts.googleapis.com/css?family=Lato:300,400,700' rel='stylesheet' type='text/css'>

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/styles/settings.css">
    <link rel="stylesheet" href="/styles/youplay.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/owl.carousel.css">
    <link rel="stylesheet" href="/styles/styles.css">
    <!--STYLES END-->

    <!-- Google Fonts -->
    <link href='http://fonts.googleapis.com/css?family=Lato:300,400,700' rel='stylesheet' type='text/css'>
    <!-- <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=RobotoDraft:300,400,500,700,400italic"> -->
  </head>

  <body>

		<%- body %>

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/skrollr.min.js"></script>
    <script src="/js/dependencies/jquery.themepunch.tools.min.js"></script>
    <script src="/js/dependencies/jquery.themepunch.revolution.min.js"></script>
    <script src="/js/dependencies/owl.carousel.min.js"></script>
    <script src="/js/dependencies/youplay.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/dependencies/angular-sails.min.js"></script>
    <script src="/js/dependencies/angular-ui-router.js"></script>
    <script src="/js/dependencies/angular-animate.min.js"></script>
    <script src="/js/dependencies/angular-aria.min.js"></script>
    <script src="/js/dependencies/angular-messages.js"></script>
    <script src="/js/dependencies/ng-file-upload-all.min.js"></script>
    <script src="/js/dependencies/ui-bootstrap.min.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/controllers/dashboardCtrl.js"></script>
    <script src="/js/controllers/homeCtrl.js"></script>
    <script src="/js/controllers/loginCtrl.js"></script>
    <script src="/js/controllers/navCtrl.js"></script>
    <script src="/js/controllers/registerCtrl.js"></script>
    <script src="/js/controllers/serverPanelCtrl.js"></script>
    <script src="/js/directives/klg-focus.js"></script>
    <script src="/js/directives/you-carrusel.js"></script>
    <script src="/js/directives/you-slider.js"></script>
    <script src="/js/routes.js"></script>
    <script src="/js/services/accessLevels.js"></script>
    <script src="/js/services/auth.js"></script>
    <script src="/js/services/currentUser.js"></script>
    <script src="/js/services/localStorage.js"></script>
    <script src="/js/services/serverRepository.js"></script>
    <script src="/js/services/youplayService.js"></script>
    <!--SCRIPTS END-->

    <!--
          Client-side Templates
          ========================

          HTML templates are important prerequisites of modern, rich client applications.
          To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
          that you load these templates client-side.

          By default, your Gruntfile is configured to automatically load and precompile
          client-side JST templates in your `assets/linker/templates` folder, then
          include them here automatically (between TEMPLATES and TEMPLATES END).

          To customize this behavior to fit your needs, just edit your Gruntfile.
          For example, here are a few things you could do:

              + Import templates from other directories
              + Use a different template engine (handlebars, jade, dust, etc.)
              + Internationalize your client-side templates using a server-side
                stringfile before they're served.
      -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/templates.js"></script>
    <!--TEMPLATES END-->
    <script>
      /*if(typeof youplay !== 'undefined') {
          youplay.init({
              smoothscroll: false,
          });
      }*/
  </script>
  </body>
</html>
